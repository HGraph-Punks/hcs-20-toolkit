"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/compressAndChunkFiles";
exports.ids = ["pages/api/compressAndChunkFiles"];
exports.modules = {

/***/ "@mongodb-js/zstd":
/*!***********************************!*\
  !*** external "@mongodb-js/zstd" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("@mongodb-js/zstd");

/***/ }),

/***/ "formidable":
/*!*****************************!*\
  !*** external "formidable" ***!
  \*****************************/
/***/ ((module) => {

module.exports = import("formidable");;

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "(api)/./pages/api/compressAndChunkFiles.ts":
/*!********************************************!*\
  !*** ./pages/api/compressAndChunkFiles.ts ***!
  \********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"config\": () => (/* binding */ config),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _mongodb_js_zstd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @mongodb-js/zstd */ \"@mongodb-js/zstd\");\n/* harmony import */ var _mongodb_js_zstd__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_mongodb_js_zstd__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var formidable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! formidable */ \"formidable\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_3__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([formidable__WEBPACK_IMPORTED_MODULE_1__]);\nformidable__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\nconst config = {\n    api: {\n        bodyParser: false\n    }\n};\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        // Handle non-POST requests\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    const form = (0,formidable__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n    form.parse(req, async (err, fields, files)=>{\n        if (err) {\n            console.error(\"Formidable parsing error:\", err);\n            return res.status(500).json({\n                success: false,\n                error: \"Error parsing form data\"\n            });\n        }\n        try {\n            // Assuming 'images' is the field name for the uploaded file\n            const imageFile = files.image[0]; // Only processing the first file\n            if (!imageFile) {\n                return res.status(400).json({\n                    success: false,\n                    error: \"No image file uploaded\"\n                });\n            }\n            console.log(imageFile);\n            const fileData = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(imageFile.filepath);\n            const fileHash = generateFileHash(Buffer.from(fileData));\n            const compressedData = await (0,_mongodb_js_zstd__WEBPACK_IMPORTED_MODULE_0__.compress)(fileData, 10);\n            const base64Data = compressedData.toString(\"base64\");\n            // TODO: add in dynamic byte sizing to exactly fit 1 kb per message\n            const constantPart = JSON.stringify({\n                c: \"\",\n                o: 0\n            });\n            const constantPartLength = constantPart.length;\n            const estimatedMaxChunks = Math.ceil(base64Data.length / 900);\n            const maxOSize = estimatedMaxChunks.toString().length;\n            const maxDataSizePerMessage = 900 - constantPartLength - maxOSize;\n            console.log(maxDataSizePerMessage);\n            // Determine MIME type from file extension, default to 'application/octet-stream' if unknown\n            const mimeType = imageFile.mimetype;\n            // Adjust chunk size as needed\n            const chunkSize = maxDataSizePerMessage;\n            const dataPrefix = `data:${mimeType};base64,`;\n            const chunks = chunkMessage(base64Data, chunkSize, dataPrefix);\n            // Only sending data for one file\n            res.status(200).json({\n                success: true,\n                chunkedImage: {\n                    index: parseInt(imageFile.originalFilename.split(\"/\")[1].split(\".\")[0]),\n                    chunks,\n                    fileHash\n                }\n            });\n        } catch (error) {\n            console.error(\"Error processing file:\", error);\n            res.status(500).json({\n                success: false,\n                error: `Error processing file: ${error.message}`\n            });\n        }\n    });\n}\nfunction chunkMessage(message, chunkSize, prefix) {\n    // TODO: Make chunks as efficient as possible with bytes\n    let messageArray = [];\n    for(let o = 0, offset = 0; offset < message.length; o++, offset += chunkSize){\n        // Adding prefix only to the first chunk\n        const chunkContent = o === 0 ? prefix + message.slice(offset, offset + chunkSize) : message.slice(offset, offset + chunkSize);\n        messageArray.push({\n            o,\n            c: chunkContent\n        });\n    }\n    return messageArray;\n}\nfunction generateFileHash(file) {\n    const hash = crypto__WEBPACK_IMPORTED_MODULE_3___default().createHash(\"sha256\");\n    hash.update(file);\n    return hash.digest(\"hex\");\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/compressAndChunkFiles.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/compressAndChunkFiles.ts"));
module.exports = __webpack_exports__;

})();