"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/compressAndChunkMetadata";
exports.ids = ["pages/api/compressAndChunkMetadata"];
exports.modules = {

/***/ "@mongodb-js/zstd":
/*!***********************************!*\
  !*** external "@mongodb-js/zstd" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("@mongodb-js/zstd");

/***/ }),

/***/ "formidable":
/*!*****************************!*\
  !*** external "formidable" ***!
  \*****************************/
/***/ ((module) => {

module.exports = import("formidable");;

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "(api)/./pages/api/compressAndChunkMetadata.ts":
/*!***********************************************!*\
  !*** ./pages/api/compressAndChunkMetadata.ts ***!
  \***********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"config\": () => (/* binding */ config),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _mongodb_js_zstd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @mongodb-js/zstd */ \"@mongodb-js/zstd\");\n/* harmony import */ var _mongodb_js_zstd__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_mongodb_js_zstd__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var formidable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! formidable */ \"formidable\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_3__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([formidable__WEBPACK_IMPORTED_MODULE_1__]);\nformidable__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\nconst config = {\n    api: {\n        bodyParser: false\n    }\n};\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        // Handle non-POST requests\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    const form = (0,formidable__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n    form.parse(req, async (err, fields, files)=>{\n        if (err) {\n            console.error(\"Formidable parsing error:\", err);\n            return res.status(500).json({\n                success: false,\n                error: \"Error parsing form data\"\n            });\n        }\n        try {\n            const metadataFile = files.metadata[0]; // Assuming there's only one metadata file\n            const topicIds = JSON.parse(fields.topicIds); // Assuming topicIds is a JSON array string\n            console.log(topicIds);\n            if (!metadataFile) {\n                return res.status(400).json({\n                    success: false,\n                    error: \"No metadata file uploaded\"\n                });\n            }\n            if (!topicIds) {\n                return res.status(400).json({\n                    success: false,\n                    error: \"No topic IDs provided\"\n                });\n            }\n            const metadataContent = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(metadataFile.filepath, \"utf8\");\n            let metadataJson = JSON.parse(metadataContent);\n            // Update the image attribute for each metadata object\n            metadataJson = metadataJson.map((item, index)=>{\n                const topicId = topicIds[index].newTopicId; // Match by the same index\n                if (topicId) {\n                    console.log(topicId);\n                    const newItem = item;\n                    delete newItem.edition;\n                    delete newItem.imageHash;\n                    return {\n                        ...newItem,\n                        image: `hcs://1/${topicId}`\n                    };\n                }\n                return item; // Return the item unchanged if no corresponding topicId\n            });\n            // Convert updated metadata back to Buffer for hashing and compression\n            let finalJson = [];\n            for(let i = 0; i < metadataJson.length; i++){\n                const updatedMetadata = JSON.stringify(metadataJson[i]);\n                const updatedBuffer = Buffer.from(updatedMetadata);\n                const fileHash = generateFileHash(updatedBuffer);\n                const compressedData = await (0,_mongodb_js_zstd__WEBPACK_IMPORTED_MODULE_0__.compress)(updatedBuffer, 10);\n                const base64Data = compressedData.toString(\"base64\");\n                const chunkSize = 900; // Adjust chunk size as needed\n                const dataPrefix = `data:application/json;base64,`;\n                const chunks = chunkMessage(base64Data, chunkSize, dataPrefix);\n                finalJson.push({\n                    index: i,\n                    chunks,\n                    fileHash\n                });\n            }\n            // Sending updated metadata back\n            res.status(200).json({\n                success: true,\n                finalJson\n            });\n        } catch (error) {\n            console.error(\"Error processing metadata:\", error);\n            res.status(500).json({\n                success: false,\n                error: `Error processing metadata: ${error.message}`\n            });\n        }\n    });\n}\nfunction chunkMessage(message, chunkSize, prefix) {\n    let messageArray = [];\n    for(let o = 0, offset = 0; offset < message.length; o++, offset += chunkSize){\n        const chunkContent = o === 0 ? prefix + message.substring(offset, offset + chunkSize) : message.substring(offset, offset + chunkSize);\n        messageArray.push({\n            o,\n            c: chunkContent\n        });\n    }\n    return messageArray;\n}\nfunction generateFileHash(file) {\n    const hash = crypto__WEBPACK_IMPORTED_MODULE_3___default().createHash(\"sha256\");\n    hash.update(file);\n    return hash.digest(\"hex\");\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/compressAndChunkMetadata.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/compressAndChunkMetadata.ts"));
module.exports = __webpack_exports__;

})();